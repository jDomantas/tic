import ints from "std/int";
import str from "std/string";
import (Result, Ok, Err) from "std/result";

type ParseResult a = ParseOk a string | ParseErr string;

export type Parse a = Parse (string -> ParseResult a);

let runParse : Parse a -> string -> ParseResult a =
    \parse ->
        match parse with
        | Parse go -> go
        end;

export let run : string -> Parse a -> Result a string =
    \input -> \parse ->
        match runParse parse input with
        | ParseOk res rest ->
            if str.length rest == 0 then
                Ok res
            else
                Err "unexpected extra input"
        | ParseErr err -> Err err
        end;

export let apply : Parse a -> Parse (a -> b) -> Parse b =
    \arg -> \f ->
        let go = \input ->
            match runParse f input with
            | ParseOk f rest ->
                match runParse arg rest with
                | ParseOk res rest -> ParseOk (f res) rest
                | ParseErr err -> ParseErr err
                end
            | ParseErr err -> ParseErr err
            end;
        Parse go;

export let ignore : Parse a -> Parse b -> Parse b =
    \check -> \res ->
        let go = \input ->
            match runParse res input with
            | ParseOk res rest ->
                match runParse check rest with
                | ParseOk _ rest -> ParseOk res rest
                | ParseErr err -> ParseErr err
                end
            | ParseErr err -> ParseErr err
            end;
        Parse go;

export let andThen : (a -> Result b string) -> Parse a -> Parse b =
    \f -> \arg ->
        let go = \input ->
            match runParse arg input with
            | ParseOk arg rest ->
                match f arg with
                | Ok res -> ParseOk res rest
                | Err err -> ParseErr err
                end
            | ParseErr err -> ParseErr err
            end;
        Parse go;

export let map : (a -> b) -> Parse a -> Parse b =
    \f -> \parse ->
        let go = \input ->
            match runParse parse input with
            | ParseOk res rest -> ParseOk (f res) rest
            | ParseErr err -> ParseErr err
            end;
        Parse go;

export let or : Parse a -> Parse a -> Parse a =
    \alt -> \parse ->
        let go = \input ->
            match runParse parse input with
            | ParseOk res rest -> ParseOk res rest
            | ParseErr _ ->
                match runParse alt input with
                | ParseOk res rest -> ParseOk res rest
                | ParseErr err -> ParseErr err
                end
            end;
        Parse go;

export let ok : a -> Parse a =
    \value ->
        let go = \input -> ParseOk value input;
        Parse go;

type ParseIntState = IntEmpty | IntParsing int int | IntDone int int | IntError string;

let parseInt : string -> ParseIntState =
    \input ->
        let step = \state -> \ch ->
            match state with
            | IntEmpty ->
                if ch < 48 then
                    IntError "missing integer"
                else if ch >= 58 then
                    IntError "missing integer"
                else
                    IntParsing (ch - 48) 1
            | IntParsing acc idx ->
                if ch < 48 then
                    IntDone acc idx
                else if ch >= 58 then
                    IntDone acc idx
                else
                    IntParsing (acc * 10 + (ch - 48)) (idx + 1)
            | IntDone res idx -> IntDone res idx
            | IntError err -> IntError err
            end;
        str.foldChars IntEmpty step input;

export let integer : Parse int =
    let go = \input ->
        match parseInt input with
        | IntEmpty -> ParseErr "missing integer"
        | IntParsing res _ -> ParseOk res ""
        | IntDone res idx ->
            let rest = str.length input - idx;
            let rest = str.substring idx rest input;
            ParseOk res rest
        | IntError err -> ParseErr err
        end;
    Parse go;

export let literal : string -> Parse string =
    \lit ->
        let go = \input ->
            if str.length input < str.length lit then
                ParseErr (str.concat "missing " lit)
            else if str.equal (str.substring 0 (str.length lit) input) lit then
                let rest = str.length input - str.length lit;
                let rest = str.substring (str.length lit) rest input;
                ParseOk lit rest
            else
                ParseErr (str.concat "missing " lit);
        Parse go;

export let char : Parse int =
    let go = \input ->
        if str.length input == 0 then
            ParseErr "missing char"
        else
            let ch = str.charAt 0 input;
            let rest = str.substring 1 (str.length input - 1) input;
            ParseOk ch rest;
    Parse go;

type ParseWordState = WordParsing int | WordDone int;

let parseWord : string -> ParseWordState =
    \input ->
        let step = \state -> \ch ->
            match state with
            | WordParsing idx ->
                if ch == 32 then
                    WordDone idx
                else
                    WordParsing (idx + 1)
            | WordDone idx -> WordDone idx
            end;
        str.foldChars (WordParsing 0) step input;

export let word : Parse string =
    let go = \input ->
        let idx = match parseWord input with
        | WordParsing idx -> idx
        | WordDone idx -> idx
        end;
        if idx == 0 then
            ParseErr "missing word"
        else
            let word = str.substring 0 idx input;
            let rest = str.length input - idx;
            let rest = str.substring idx rest input;
            ParseOk word rest;
    Parse go;
