import ints from "std/int";
import option(Option, Some, None) from "std/option";
import result(Result, Ok) from "std/result";
import list(List, Nil, Cons) from "std/list";
import strings from "std/string";
import parse(Parse) from "../shared/parse.tic";
import utils from "../shared/aoc-utils.tic";

type Symbol = Symbol int int bool;

type Number = Number int int int int;

type ParseState =
    | ParseNumber int int (List Symbol) (List Number) int int
    | ParseDone int int (List Symbol) (List Number);


type Input = Input (List Symbol) (List Number);

let isDigit : int -> bool =
    \ch ->
        if ch >= 48 then
            ch < 58
        else
            false;

let parseLine : int -> string -> Input =
    let dot = strings.charAt 0 ".";
    let star = strings.charAt 0 "*";
    let step = \state -> \ch ->
        match state with
        | ParseDone r c syms nums ->
            if isDigit ch then
                ParseNumber r (c + 1) syms nums (ch - 48) 1
            else if ch == dot then
                ParseDone r (c + 1) syms nums
            else
                ParseDone r (c + 1) (Cons (Symbol r c (ch == star)) syms) nums
        | ParseNumber r c syms nums val width ->
            let last = Number r (c - width) val width;
            if isDigit ch then
                ParseNumber r (c + 1) syms nums (val * 10 + (ch - 48)) (width + 1)
            else if ch == dot then
                ParseDone r (c + 1) syms (Cons last nums)
            else
                ParseDone r (c + 1) (Cons (Symbol r c (ch == star)) syms) (Cons last nums)
        end;
    \r -> \line ->
        match strings.foldChars (ParseDone r 0 Nil Nil) step line with
        | ParseDone _ _ syms nums -> Input syms nums
        | ParseNumber _ c syms nums val width ->
            let last = Number r (c - width) val width;
            Input syms (Cons last nums)
        end;

let enumerate : (int -> a -> b) -> List a -> List b =
    let intoFolder : List a -> int -> (int -> a -> b) -> List b =
        \fold xs -> \start -> \f ->
            match xs with
            | Nil -> Nil
            | Cons x xs -> Cons (f start x) (xs (start + 1) f)
            end;
    \f -> \xs -> intoFolder xs 0 f;

let concatInputs : Input -> Input -> Input =
    \a -> \b ->
        match a with
        | Input syms1 nums1 ->
            match b with
            | Input syms2 nums2 ->
                Input (list.concat syms1 syms2) (list.concat nums1 nums2)
            end
        end;

let parseInput : string -> Result Input string =
    \s ->
        s
        |> strings.lines
        |> enumerate parseLine
        |> list.foldl (Input Nil Nil) concatInputs
        |> Ok;

let isAdjacent : Symbol -> Number -> bool =
    \sym -> \num ->
        match num with
        | Number nr nc _ nw ->
            match sym with
            | Symbol sr sc _ ->
                if sr + 1 < nr then
                    false
                else if nr + 1 < sr then
                    false
                else if sc + 1 < nc then
                    false
                else if nc + nw < sc then
                    false
                else
                    true
            end
        end;

let hasNearbySymbol : List Symbol -> Number -> bool =
    \fold syms -> \num ->
        match syms with
        | Nil -> false
        | Cons x xs ->
            if isAdjacent x num then
                true
            else
                xs num
        end;

let part1 : Input -> string =
    \input ->
        match input with
        | Input syms nums ->
            nums
            |> list.filter (hasNearbySymbol syms)
            |> list.map (\n -> match n with | Number _ _ x _ -> x end)
            |> list.sum
            |> ints.toString
        end;

let gearRatio : List Number -> Option int =
    let val = \n -> match n with | Number _ _ x _ -> x end;
    \nums ->
        match nums with
        | Nil -> None
        | Cons x xs ->
            match xs with
            | Nil -> None
            | Cons y ys ->
                if list.length ys == 0 then
                    Some (val x * val y)
                else
                    None
            end
        end;

let part2 : Input -> string =
    \input ->
        match input with
        | Input syms nums ->
            syms
            |> list.filter (\s -> match s with | Symbol _ _ x -> x end)
            |> list.map (\star ->
                nums
                |> list.filter (isAdjacent star))
            |> list.filterMap gearRatio
            |> list.sum
            |> ints.toString
        end;

export let main : string -> string = utils.makeSolution parseInput part1 part2;

-- let appendLine : string -> string -> string =
--     \new -> \s -> strings.concat (strings.concat s (strings.fromChar 10)) new;

-- let testInput : string =
--     "467..114.."
--     |> appendLine "...*......"
--     |> appendLine "..35..633."
--     |> appendLine "......#..."
--     |> appendLine "617*......"
--     |> appendLine ".....+.58."
--     |> appendLine "..592....."
--     |> appendLine "......755."
--     |> appendLine "...$.*...."
--     |> appendLine ".664.598..";

-- export let test = main testInput;

-- repro with: cargo run -p ticc-tests --release -- aoc2023-day03
