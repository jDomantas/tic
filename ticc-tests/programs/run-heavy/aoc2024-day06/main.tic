import ints from "std/int";
import option(Option, Some, None) from "std/option";
import result(Result, Ok, Err) from "std/result";
import strings from "std/string";
import list(List, Nil, Cons) from "std/list";
import array(Array) from "std/array";
import utils from "../shared/aoc-utils.tic";
import parse from "../shared/parse.tic";
import tree from "../shared/tree.tic";

type Cell = Empty | Guard | Wall | Visited | Outside;

let parseCell : int -> Result Cell string =
    let wall = strings.charAt 0 "#";
    let empty = strings.charAt 0 ".";
    let guard = strings.charAt 0 "^";
    \c ->
        if c == wall then
            Ok Wall
        else if c == empty then
            Ok Empty
        else if c == guard then
            Ok Guard
        else
            Err "bad cell";

let parseInput : string -> Result (List (List Cell)) string =
    \input ->
        input
        |> strings.lines
        |> list.map strings.chars
        |> list.map (list.map parseCell)
        |> list.map list.allOk
        |> list.allOk;

type State =
    | Walking int int (Array (Array Cell)) int int int int
    | Done (Array (Array Cell));

let get : int -> int -> Array (Array Cell) -> Cell =
    \x -> \y -> \grid ->
        grid
        |> array.get y
        |> option.andThen (\row ->
            row
            |> array.get x)
        |> option.unwrapOr Outside;

let markVisited : int -> int -> Array (Array Cell) -> Array (Array Cell) =
    \x -> \y -> \cells ->
        array.mapIdx y (array.mapIdx x (\_ -> Visited)) cells;

let step : State -> State =
    \state ->
        match state with
        | Done _ -> state
        | Walking w h cells x y dx dy ->
            let nextX = x + dx;
            let nextY = y + dy;
            let marked = markVisited nextX nextY cells;
            match get nextX nextY cells with
            | Empty ->
                Walking w h marked nextX nextY dx dy
            | Wall ->
                Walking w h cells x y (0 - dy) dx
            | Visited ->
                Walking w h marked nextX nextY dx dy
            | Guard ->
                Walking w h marked nextX nextY dx dy
            | Outside ->
                Done cells
            end
        end;

let countVisited : Array (Array Cell) -> int =
    \cells ->
        cells
        |> array.toList
        |> list.map array.toList
        |> list.flatten
        |> list.filter (\c ->
            match c with
            | Empty -> false
            | Guard -> true
            | Wall -> false
            | Visited -> true
            | Outside -> false
            end)
        |> list.length;

let solveState : State -> int =
    \state ->
        match state with
        | Walking w h _ _ _ _ _ ->
            let maxSteps = w * h * 4;
            let endState = ints.iterate maxSteps step state;
            match endState with
            | Walking _ _ c _ _ _ _ -> countVisited c
            | Done c -> countVisited c
            end
        | Done cells ->
            countVisited cells
        end;

type Pos = Pos int int;

let guardPosition : List (List Cell) -> Option Pos =
    \grid ->
        let width = list.head grid |> option.unwrapOr Nil |> list.length;
        let height = list.length grid;
        let grid = grid |> list.map array.fromList |> array.fromList;
        list.range 0 width
        |> list.flatMap (\x ->
            list.range 0 height
            |> list.filterMap (\y ->
                match get x y grid with
                | Guard -> Some (Pos x y)
                | Empty -> None
                | Wall -> None
                | Visited -> None
                | Outside -> None
                end))
        |> list.head;

let getX : Pos -> int =
    \p ->
        match p with
        | Pos x _ -> x
        end;

let getY : Pos -> int =
    \p ->
        match p with
        | Pos _ y -> y
        end;

let part1 : List (List Cell) -> string =
    \grid ->
        let width = list.head grid |> option.unwrapOr Nil |> list.length;
        let height = list.length grid;
        let gridArray = grid |> list.map array.fromList |> array.fromList;
        guardPosition grid
        |> option.map (\p -> Walking width height gridArray (getX p) (getY p) 0 (0-1))
        |> option.map solveState
        |> result.okOr "no guard"
        |> result.map ints.toString
        |> result.join;

let groupByY : List Pos -> List (List Pos) =
    \fold ps ->
        match ps with
        | Nil -> Nil
        | Cons x xs ->
            match xs with
            | Nil -> Cons (Cons x Nil) Nil
            | Cons y ys ->
                match y with
                | Nil -> ?emptyGroup
                | Cons g _ ->
                    if getY g == getY x then
                        Cons (Cons x y) ys
                    else
                        Cons (Cons x Nil) xs
                end
            end
        end;

let toLeftLookup : List Pos -> int -> Option int =
    \walls ->
        let tree =
            walls
            |> list.map getX
            |> tree.balanced;
        let makeLookup = \fold tree ->
            match tree with
            | tree.Empty -> \_val -> None
            | tree.Node l v r -> \val ->
                if v > val then
                    l val
                else
                    let r = r val;
                    match r with
                    | None -> Some v
                    | Some _ -> r
                    end
            end;
        makeLookup tree;

let toLeft : List Pos -> int -> int -> Option int =
    \walls ->
        let wallGroups =
            walls
            |> list.sortBy (\a -> \b ->
                if getY a != getY b then
                    getY a < getY b
                else
                    getX a < getX b)
            |> groupByY
            |> tree.balanced;
        let makeLookup = \fold tree ->
            match tree with
            | tree.Empty -> \_x -> \_y -> None
            | tree.Node l lst r ->
                match lst with
                | Nil -> ?emptyGroup
                | Cons p _ ->
                    let v = getY p;
                    let rowLookup = toLeftLookup lst;
                    \x -> \y ->
                        if v > y then
                            l x y
                        else if v < y then
                            r x y
                        else
                            rowLookup x
                end
            end;
        makeLookup wallGroups;

let toRightLookup : List Pos -> int -> Option int =
    \walls ->
        let tree =
            walls
            |> list.map getX
            |> tree.balanced;
        let makeLookup = \fold tree ->
            match tree with
            | tree.Empty -> \_val -> None
            | tree.Node l v r -> \val ->
                if v < val then
                    r val
                else
                    let l = l val;
                    match l with
                    | None -> Some v
                    | Some _ -> l
                    end
            end;
        makeLookup tree;

let toRight : List Pos -> int -> int -> Option int =
    \walls ->
        let wallGroups =
            walls
            |> list.sortBy (\a -> \b ->
                if getY a != getY b then
                    getY a < getY b
                else
                    getX a < getX b)
            |> groupByY
            |> tree.balanced;
        let makeLookup = \fold tree ->
            match tree with
            | tree.Empty -> \_x -> \_y -> None
            | tree.Node l lst r ->
                match lst with
                | Nil -> ?emptyGroup
                | Cons p _ ->
                    let v = getY p;
                    let rowLookup = toRightLookup lst;
                    \x -> \y ->
                        if v > y then
                            l x y
                        else if v < y then
                            r x y
                        else
                            rowLookup x
                end
            end;
        makeLookup wallGroups;

let toUp : List Pos -> int -> int -> Option int =
    \walls ->
        let flipped =
            walls
            |> list.map (\p -> match p with | Pos x y -> Pos y x end)
            |> toLeft;
        \x -> \y -> flipped y x;

let toDown : List Pos -> int -> int -> Option int =
    \walls ->
        let flipped =
            walls
            |> list.map (\p -> match p with | Pos x y -> Pos y x end)
            |> toRight;
        \x -> \y -> flipped y x;

let enumerateMap : (int -> a -> b) -> List a -> List b =
    \f -> \l ->
        let go = \fold l -> \idx ->
            match l with
            | Nil -> Nil
            | Cons x xs -> Cons (f idx x) (xs (idx + 1))
            end;
        go l 0;

let wallPositions : List (List Cell) -> List Pos =
    \grid ->
        grid
        |> enumerateMap (\y -> \row ->
            row
            |> enumerateMap (\x -> \c ->
                match c with
                | Wall -> Some (Pos x y)
                | Empty -> None
                | Guard -> None
                | Visited -> None
                | Outside -> None
                end))
        |> list.flatten
        |> list.filterMap (\x -> x);

type Lookups = Lookups
    (int -> int -> Option int)
    (int -> int -> Option int)
    (int -> int -> Option int)
    (int -> int -> Option int);

let makeLookups : List Pos -> Lookups =
    \walls -> Lookups
        (toUp walls)
        (toDown walls)
        (toLeft walls)
        (toRight walls);

let simulateSteps : int -> Pos -> Lookups -> Option Pos =
    \steps -> \start -> \lookups ->
        match lookups with
        | Lookups toUp toDown toLeft toRight ->
            let move = \start ->
                match start with
                | Pos x y ->
                    match toUp x y with
                    | None -> None
                    | Some y ->
                        let y = y + 1;
                        match toRight x y with
                        | None -> None
                        | Some x ->
                            let x = x - 1;
                            match toDown x y with
                            | None -> None
                            | Some y ->
                                let y = y - 1;
                                match toLeft x y with
                                | None -> None
                                | Some x ->
                                    let x = x + 1;
                                    Some (Pos x y)
                                end
                            end
                        end
                    end
                end;
            ints.iterate steps (option.andThen move) (Some start)
        end;

let addWall : int -> int -> Lookups -> Lookups =
    \wx -> \wy -> \lookups ->
        match lookups with
        | Lookups toUp toDown toLeft toRight ->
            Lookups
                (\x -> \y ->
                    if x != wx then
                        toUp x y
                    else if y < wy then
                        toUp x y
                    else
                        match toUp x y with
                        | None -> Some wy
                        | Some yy -> Some (ints.max yy wy)
                        end)
                (\x -> \y ->
                    if x != wx then
                        toDown x y
                    else if y > wy then
                        toDown x y
                    else
                        match toDown x y with
                        | None -> Some wy
                        | Some yy -> Some (ints.min yy wy)
                        end)
                (\x -> \y ->
                    if y != wy then
                        toLeft x y
                    else if x < wx then
                        toLeft x y
                    else
                        match toLeft x y with
                        | None -> Some wx
                        | Some xx -> Some (ints.max xx wx)
                        end)
                (\x -> \y ->
                    if y != wy then
                        toRight x y
                    else if x > wx then
                        toRight x y
                    else
                        match toRight x y with
                        | None -> Some wx
                        | Some xx -> Some (ints.min xx wx)
                        end)
        end;

let part2 : List (List Cell) -> string =
    \grid ->
        let width = list.head grid |> option.unwrapOr Nil |> list.length;
        let height = list.length grid;
        let walls = wallPositions grid;
        let lookups = makeLookups walls;
        let maxSteps = list.length walls;
        match guardPosition grid with
        | Some p ->
            list.range 0 width
            |> list.flatMap (\x ->
                let positions =
                    if x == getX p then
                        list.range 0 height
                        |> list.filter (\y -> y != getY p)
                    else
                        list.range 0 height;
                positions
                |> list.filterMap (\y ->
                    let lookups = addWall x y lookups;
                    let loop =
                        simulateSteps maxSteps p lookups
                        |> option.isSome;
                    if loop then
                        Some (Pos x y)
                    else
                        None))
            |> list.length
            |> ints.toString
        | None -> "no guard"
        end;

export let main : string -> string = utils.makeSolution parseInput part1 part2;
