import ints from "std/int";
import result(Result, Ok, Err) from "std/result";
import list(List, Nil, Cons) from "std/list";
import strings from "std/string";
import utils from "../shared/aoc-utils.tic";

type Pair a b = Pair a b;

let parseLine : string -> Result (Pair int int) string =
    \line ->
        match strings.split 32 line |> list.filter (\x -> strings.length x > 0) with
        | Nil -> Err "bad line"
        | Cons first rest ->
            match rest with
            | Nil -> Err "bad line"
            | Cons second rest ->
                match rest with
                | Nil ->
                    Ok Pair
                    |> result.apply (ints.parse first)
                    |> result.apply (ints.parse second)
                    |> result.mapErr (\_ -> "bad number")
                | Cons _ _ -> Err "bad line"
                end
            end
        end;



let parseInput : string -> Result (List (Pair int int)) string =
    \input ->
        input
        |> strings.lines
        |> list.map parseLine
        |> list.allOk;

let first : Pair a b -> a =
    \p ->
        match p with
        | Pair x _ -> x
        end;

let second : Pair a b -> b =
    \p ->
        match p with
        | Pair _ x -> x
        end;

let absDiff : int -> int -> int =
    \a -> \b ->
        if a > b then
            a - b
        else
            b - a;

let part1 : List (Pair int int) -> string =
    \pairs ->
        let list1 =
            pairs
            |> list.map first
            |> list.sortBy (\a -> \b -> a < b);
        let list2 =
            pairs
            |> list.map second
            |> list.sortBy (\a -> \b -> a < b);
        list.zip (\a -> \b -> absDiff a b) list1 list2
        |> list.sum
        |> ints.toString;

let part2 : List (Pair int int) -> string =
    \pairs ->
        let list1 = pairs |> list.map first;
        let list2 = pairs |> list.map second;
        list1
        |> list.map (\x ->
            let occurences =
                list2
                |> list.filter (\y -> x == y)
                |> list.length;
            occurences * x)
        |> list.sum
        |> ints.toString;

export let main : string -> string = utils.makeSolution parseInput part1 part2;
