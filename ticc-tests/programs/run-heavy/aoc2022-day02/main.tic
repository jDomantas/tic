import ints from "std/int";
import option from "std/option";
import result(Result, Ok, Err) from "std/result";
import list(List) from "std/list";
import str from "std/string";
import utils from "../shared/aoc-utils.tic";

type RPS = Rock | Paper | Scissors;

type Action = X | Y | Z;

type Round = Round RPS Action;

type Outcome = Win | Lose | Draw;

let outcome : RPS -> RPS -> Outcome =
    \opponent -> \action ->
        match opponent with
        | Rock ->
            match action with
            | Rock -> Draw
            | Paper -> Win
            | Scissors -> Lose
            end
        | Paper ->
            match action with
            | Rock -> Lose
            | Paper -> Draw
            | Scissors -> Win
            end
        | Scissors ->
            match action with
            | Rock -> Win
            | Paper -> Lose
            | Scissors -> Draw
            end
        end;

let points : RPS -> RPS -> int =
    \opponent -> \action ->
        let fromAction =
            match action with
            | Rock -> 1
            | Paper -> 2
            | Scissors -> 3
            end;
        let fromOutcome =
            match outcome opponent action with
            | Win -> 6
            | Draw -> 3
            | Lose -> 0
            end;
        fromAction + fromOutcome;

let part1Points : Round -> int =
    \round ->
        match round with
        | Round o a ->
            let action =
                match a with
                | X -> Rock
                | Y -> Paper
                | Z -> Scissors
                end;
            points o action
        end;

let pickAction : RPS -> Outcome -> RPS =
    \opponent -> \outcome ->
        match opponent with
        | Rock ->
            match outcome with
            | Win -> Paper
            | Draw -> Rock
            | Lose -> Scissors
            end
        | Paper ->
            match outcome with
            | Win -> Scissors
            | Draw -> Paper
            | Lose -> Rock
            end
        | Scissors ->
            match outcome with
            | Win -> Rock
            | Draw -> Scissors
            | Lose -> Paper
            end
        end;

let part2Points : Round -> int =
    \round ->
        match round with
        | Round o a ->
            let outcome =
                match a with
                | X -> Lose
                | Y -> Draw
                | Z -> Win
                end;
            let action = pickAction o outcome;
            points o action
        end;

let char : string -> int = \s -> str.charAt 0 s;

let parseOpponent : int -> Result RPS string =
    \x ->
        if x == 65 then
            Ok Rock
        else if x == 66 then
            Ok Paper
        else if x == 67 then
            Ok Scissors
        else
            Err "invalid RPS";

let parseAction : int -> Result Action string =
    \x ->
        if x == 88 then
            Ok X
        else if x == 89 then
            Ok Y
        else if x == 90 then
            Ok Z
        else
            Err "invalid action";

let parseLine : string -> Result Round string =
    \line ->
        if str.length line != 3 then
            Err "bad line"
        else if str.charAt 1 line != char " " then
            Err "bad line"
        else
            Ok Round
            |> result.apply (parseOpponent (str.charAt 0 line))
            |> result.apply (parseAction (str.charAt 2 line));

let parseInput : string -> Result (List Round) string =
    \input ->
        input
        |> str.lines
        |> list.map parseLine
        |> list.allOk;

let part1 : List Round -> string =
    \rounds ->
        rounds
        |> list.map part1Points
        |> list.sum
        |> ints.toString;

let part2 : List Round -> string =
    \rounds ->
        rounds
        |> list.map part2Points
        |> list.sum
        |> ints.toString;

export let main : string -> string = utils.makeSolution parseInput part1 part2;
