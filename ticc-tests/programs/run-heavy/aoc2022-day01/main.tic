import ints from "std/int";
import str from "std/string";
import option from "std/option";
import result(Result, Ok) from "std/result";
import list(List, Nil, Cons) from "std/list";
import utils from "../shared/aoc-utils.tic";

type InputLine = Empty | Number int;

let parseInputLine : string -> Result InputLine string =
    \line ->
        if str.length line == 0 then
            Ok Empty
        else
            ints.parse line
            |> result.map Number
            |> result.mapErr (\_ -> "failed to parse int");

let parseInput : string -> Result (List InputLine) string =
    \input ->
        input
        |> str.lines
        |> list.map parseInputLine
        |> list.allOk;

let groupLines : List InputLine -> List (List int) =
    \fold lines ->
        match lines with
        | Nil -> Nil
        | Cons line rest ->
            match line with
            | Empty -> Cons Nil rest
            | Number x ->
                match rest with
                | Nil -> Cons (Cons x Nil) Nil
                | Cons y ys -> Cons (Cons x y) ys
                end
            end
        end;

type SolutionAcc = Zero | One int | Two int int | Three int int int;

let top3 : List int -> SolutionAcc =
    \fold list ->
        match list with
        | Nil -> Zero
        | Cons x xs ->
            match xs with
            | Zero -> One x
            | One a ->
                if x > a then
                    Two x a
                else
                    Two a x
            | Two a b ->
                if x > a then
                    Three x a b
                else if x > b then
                    Three a x b
                else
                    Three a b x
            | Three a b c ->
                if x > a then
                    Three x a b
                else if x > b then
                    Three a x b
                else if x > c then
                    Three a b x
                else
                    xs
            end
        end;

let part1 : List InputLine -> string =
    \input ->
        input
        |> groupLines
        |> list.map list.sum
        |> list.max
        |> option.map ints.toString
        |> option.unwrapOr "no elves";

let part2 : List InputLine -> string =
    \input ->
        let top = input
        |> groupLines
        |> list.map list.sum
        |> top3;
        match top with
        | Three a b c -> ints.toString (a + b + c)
        | Two _ _ -> "less than 3 elves"
        | One _ -> "less than 3 elves"
        | Zero -> "less than 3 elves"
        end;

export let main : string -> string = utils.makeSolution parseInput part1 part2;
