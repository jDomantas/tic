import ints from "std/int";
import option(Option, Some, None) from "std/option";
import strings from "std/string";
import list(List, Nil, Cons) from "std/list";
import result(Result, Ok, Err) from "std/result";
import array from "std/array";
import utils from "../shared/aoc-utils.tic";

type Dir = Up | Down | Left | Right;

type Button = Digit int | Action | Empty | Dir Dir;

let parseButton : int -> Result Button string =
    let a = strings.charAt 0 "A";
    let d0 = strings.charAt 0 "0";
    let d9 = strings.charAt 0 "9";
    let up = strings.charAt 0 "^";
    let down = strings.charAt 0 "v";
    let left = strings.charAt 0 "<";
    let right = strings.charAt 0 ">";
    \ch ->
        if ch == a then
            Ok Action
        else if ch == up then
            Ok (Dir Up)
        else if ch == down then
            Ok (Dir Down)
        else if ch == left then
            Ok (Dir Left)
        else if ch == right then
            Ok (Dir Right)
        else if ch >= d0 then
            if ch <= d9 then
                Ok (Digit (ch - d0))
            else
                Err "bad button"
        else
            Err "bad button";

let parseInput : string -> Result (List (List Button)) string =
    \input ->
        input
        |> strings.lines
        |> list.map strings.chars
        |> list.map (list.map parseButton)
        |> list.map list.allOk
        |> list.allOk;

let codeNum : List Button -> int =
    \bs ->
        let go = \fold bs -> \acc ->
            match bs with
            | Nil -> acc
            | Cons x xs ->
                match x with
                | Digit d -> xs (acc * 10 + d)
                | Action -> xs acc
                | Empty -> xs acc
                | Dir _ -> xs acc
                end
            end;
        go bs 0;

-- y\x |  0  |  1  |  2
-- ----------------------
--   0 |  7  |  8  |  9
--   1 |  4  |  5  |  6
--   2 |  1  |  2  |  3
--   3 |     | 0/^ |  A
--   4 |  <  |  v  |  >

let upArrow : int = 3 * 3 + 1;
let downArrow : int = 4 * 3 + 1;
let leftArrow : int = 4 * 3 + 0;
let rightArrow : int = 4 * 3 + 2;
let action : int = 3 * 3 + 2;

let pressTop : List int -> int =
    \buttons ->
        list.length buttons;

let and : bool -> bool -> bool =
    \a -> \b -> if a then b else false;

let pressFrom : int -> int -> List (List int) =
    let rep = \t -> \b -> \x -> ints.iterate t (Cons b) x;
    let vertical = \y1 -> \y2 -> \x ->
        if y1 > y2 then
            rep (y1 - y2) upArrow x
        else if y2 > y1 then
            rep (y2 - y1) downArrow x
        else
            x;
    \prev -> \press ->
        let action = Cons action Nil;
        let x1 = prev % 3;
        let y1 = prev / 3;
        let x2 = press % 3;
        let y2 = press / 3;
        if and (x1 == 0) (y2 == 3) then
            Cons (rep (x2 - x1) rightArrow (vertical y1 y2 action)) Nil
        else if and (x2 == 0) (y1 == 3) then
            Cons (vertical y1 y2 (rep (x1 - x2) leftArrow action)) Nil
        else if x1 < x2 then
            let a = rep (x2 - x1) rightArrow (vertical y1 y2 action);
            let b = vertical y1 y2 (rep (x2 - x1) rightArrow action);
            Cons a (Cons b Nil)
        else if x2 < x1 then
            let a = rep (x1 - x2) leftArrow (vertical y1 y2 action);
            let b = vertical y1 y2 (rep (x1 - x2) leftArrow action);
            Cons a (Cons b Nil)
        else
            Cons (vertical y1 y2 action) Nil;

let mapPairs : (a -> a -> b) -> List a -> List b =
    \f -> \l ->
        let go = \fold l -> \p ->
            match l with
            | Nil -> Nil
            | Cons x xs -> Cons (f p x) (xs x)
            end;
        match l with
        | Nil -> Nil
        | Cons x xs -> go xs x
        end;

let pressNext : (List int -> int) -> List int -> int =
    \pressPrev -> \buttons ->
        if list.length buttons > 6 then
            ?wtf
        else
            let last = buttons |> list.skip (list.length buttons - 1) |> list.head |> option.unwrapOr 0;
        if last != action then
            ?wtf2
            else
        let solvePair = \prev -> \cur ->
            pressFrom prev cur
            |> list.map pressPrev
            |> list.min
            |> option.unwrapOr 9999999999999;
        Cons action buttons
        |> mapPairs solvePair
        |> list.sum;

let encode : List int -> int =
    \l ->
        match list.reverse l with
        | Nil -> ?invalid
        | Cons x xs ->
            if x != action then
                ?invalid2
            else
                xs
                |> list.map (\x -> if x < 10 then ?invalid3 else x - 9)
                |> list.foldl 0 (\acc -> \b -> acc * 6 + b)
        end;

let decode : int -> List int =
    let divs =
        list.range 0 5
        |> list.map (\x -> ints.iterate x (\y -> y * 6) 1);
    \x ->
        divs
        |> list.map (\d -> x / d % 6)
        |> list.filterMap (\x ->
            if x == 0 then
                None
            else
                Some (x + 9))
        |> (\x -> list.concat x (Cons action Nil));

let memoised : (List int -> int) -> List int -> int =
    \f ->
        let arr =
            list.range 0 (6*6*6*6*6)
            |> list.map decode
            |> list.map f
            |> array.fromList;
        \l ->
            match array.get (encode l) arr with
            | None -> ?shite
            | Some x -> x
            end;

let buttonNum : Button -> int =
    \b ->
        match b with
        | Digit d ->
            if d == 0 then
                3 * 3 + 1
            else
                let x = (d - 1) % 3;
                let y = 2 - (d - 1) / 3;
                3 * y + x
        | Action -> action
        | Empty -> ?invalid
        | Dir d ->
            match d with
            | Left -> leftArrow
            | Right -> rightArrow
            | Up -> upArrow
            | Down -> downArrow
            end
        end;

let solve : int -> List (List Button) -> string =
    \intermediateKeypads -> \codes ->
        let f = ints.iterate (intermediateKeypads + 1) (\f -> pressNext (memoised f)) pressTop;
        codes
        |> list.map (\code ->
            let len = code |> list.map buttonNum |> f;
            let num = codeNum code;
            len * num)
        |> list.sum
        |> ints.toString;


let part1 : List (List Button) -> string = solve 2;
let part2 : List (List Button) -> string = solve 25;

export let main : string -> string = utils.makeSolution parseInput part1 part2;
