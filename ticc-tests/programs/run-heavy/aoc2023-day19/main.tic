import ints from "std/int";
import option(Option, Some, None) from "std/option";
import result(Result, Ok, Err) from "std/result";
import list(List, Nil, Cons) from "std/list";
import strings from "std/string";
import array(Array) from "std/array";
import utils from "../shared/aoc-utils.tic";
import parse(Parse) from "../shared/parse.tic";

let isLowerLetter : int -> bool =
    let a = strings.charAt 0 "a";
    let z = strings.charAt 0 "z";
    \c ->
        if c >= a then
            c <= z
        else
            false;

let parseName : Parse string = parse.takeWhile isLowerLetter;

type Action = Accept | Reject | Goto string;

type Prop = X | M | A | S;

type Rule =
    | CheckGreater Prop int Action
    | CheckLess Prop int Action
    | Act Action;

let parseProp : Parse Prop =
    (parse.map (\_ -> X) (parse.literal "x"))
    |> parse.or (parse.map (\_ -> M) (parse.literal "m"))
    |> parse.or (parse.map (\_ -> A) (parse.literal "a"))
    |> parse.or (parse.map (\_ -> S) (parse.literal "s"));

let parseAction : Parse Action =
    (parse.map (\_ -> Accept) (parse.literal "A"))
    |> parse.or (parse.map (\_ -> Reject) (parse.literal "R"))
    |> parse.or (parse.map Goto parseName);

let parseCmp : string -> (Prop -> int -> Action -> a) -> Parse a =
    \op -> \f ->
        parse.ok f
        |> parse.apply parseProp
        |> parse.ignore (parse.literal op)
        |> parse.apply parse.integer
        |> parse.ignore (parse.literal ":")
        |> parse.apply parseAction;

let parseRule : Parse Rule =
    (parseCmp "<" CheckLess)
    |> parse.or (parseCmp ">" CheckGreater)
    |> parse.or (parseAction |> parse.map Act);

type Workflow = Workflow string (List Rule) Action;

let parseList : Parse a -> Parse (List a) =
    let close = strings.charAt 0 "}";
    \elem ->
        parse.ok (\x -> x)
        |> parse.ignore (parse.literal "{")
        |> parse.apply (parse.takeWhile (\c -> c != close))
        |> parse.ignore (parse.literal "}")
        |> parse.andThen (\s ->
            s
            |> strings.split (strings.charAt 0 ",")
            |> list.map (\s -> parse.run s elem)
            |> list.allOk);

type Pair a b = Pair a b;

let unpackFallback : List Rule -> Result (Pair (List Rule) Action) string =
    \rules ->
        match list.reverse rules with
        | Nil -> Err "no fallback rule"
        | Cons x xs ->
            match x with
            | Act a -> Ok (Pair (list.reverse xs) a)
            | CheckGreater _ _ _ -> Err "no fallback rule"
            | CheckLess _ _ _ -> Err "no fallback rule"
            end
        end;

let parseWorkflow : Parse Workflow =
    parse.ok Pair
    |> parse.apply parseName
    |> parse.apply (parseList parseRule)
    |> parse.andThen (\w ->
        match w with
        | Pair id rules ->
            match unpackFallback rules with
            | Ok p ->
                match p with
                | Pair l f -> Ok (Workflow id l f)
                end
            | Err e -> Err e
            end
        end);

type Item = Item int int int int;

let parseItem : Parse Item =
    parse.ok Item
    |> parse.ignore (parse.literal "{x=")
    |> parse.apply parse.integer
    |> parse.ignore (parse.literal ",m=")
    |> parse.apply parse.integer
    |> parse.ignore (parse.literal ",a=")
    |> parse.apply parse.integer
    |> parse.ignore (parse.literal ",s=")
    |> parse.apply parse.integer
    |> parse.ignore (parse.literal "}");

type Line = WorkflowLine Workflow | ItemLine Item;

let parseLine : Parse Line =
    parse.map WorkflowLine parseWorkflow
    |> parse.or (parse.map ItemLine parseItem);

type Input = Input (List Workflow) (List Item);

let collectInput : List Line -> Input =
    \fold lines ->
        match lines with
        | Nil -> Input Nil Nil
        | Cons x xs ->
            match xs with
            | Input wfs items ->
                match x with
                | WorkflowLine w -> Input (Cons w wfs) items
                | ItemLine i -> Input wfs (Cons i items)
                end
            end
        end;

let parseInput : string -> Result Input string =
    \s ->
        s
        |> strings.lines
        |> list.filter (\l -> strings.length l > 0)
        |> list.map (\s -> parse.run s parseLine)
        |> list.allOk
        |> result.map collectInput;

let get : Item -> Prop -> int =
    \i -> \key ->
        match i with
        | Item x m a s ->
            match key with
            | X -> x
            | M -> m
            | A -> a
            | S -> s
            end
        end;

let matchRule : Rule -> Item -> Option Action =
    \r -> \i ->
        match r with
        | CheckGreater x t a -> if get i x > t then Some a else None
        | CheckLess x t a -> if get i x < t then Some a else None
        | Act a -> Some a
        end;

let matchWorkflow : Workflow -> Item -> Action =
    \w -> \i ->
        match w with
        | Workflow _ rules fallback ->
            rules
            |> list.foldl None (\x -> \r ->
                match x with
                | Some _ -> x
                | None -> matchRule r i
                end)
            |> option.unwrapOr fallback
        end;

type PartState = Accepted | Rejected | InWorkflow string | Error string;

let advanceState : Item -> List Workflow -> PartState -> PartState =
    \item -> \wfs -> \state ->
        match state with
        | Accepted -> state
        | Rejected -> state
        | Error _ -> state
        | InWorkflow wf ->
            let wf =
                wfs
                |> list.filter (\w ->
                    match w with
                    | Workflow id _ _ -> strings.equal wf id
                    end)
                |> list.head;
            match wf with
            | Some wf ->
                match matchWorkflow wf item with
                | Accept -> Accepted
                | Reject -> Rejected
                | Goto wf -> InWorkflow wf
                end
            | None -> Error "item is in nonexistent workflow"
            end
        end;

let isAccepted : List Workflow -> Item -> Result bool string =
    \wfs -> \item ->
        let state = InWorkflow "in";
        match ints.iterate (list.length wfs) (advanceState item wfs) state with
        | Accepted -> Ok true
        | Rejected -> Ok false
        | Error e -> Err e
        | InWorkflow _ -> Err "item is in a loop"
        end;

let rating : Item -> int =
    \i ->
        match i with
        | Item a b c d -> a + b + c + d
        end;

let part1 : Input -> string =
    \input ->
        match input with
        | Input wfs items ->
            items
            |> list.filterMap (\i ->
                match isAccepted wfs i with
                | Ok x ->
                    if x then
                        Some (Ok i)
                    else
                        None
                | Err e -> Some (Err e)
                end)
            |> list.allOk
            |> result.map (list.map rating)
            |> result.map (list.sum)
            |> result.map ints.toString
            |> result.join
        end;

type RangeItem = RangeItem int int int int int int int int;

type PartState = Accepted | Rejected | InWorkflow string | Error string | Switch Prop int;

type RangeAction = RangeAccept | RangeReject | RangeGoto string | RangeSwitch Prop int;

let getLow : RangeItem -> Prop -> int =
    \i -> \key ->
        match i with
        | RangeItem x _ m _ a _ s _ ->
            match key with
            | X -> x
            | M -> m
            | A -> a
            | S -> s
            end
        end;

let getHigh : RangeItem -> Prop -> int =
    \i -> \key ->
        match i with
        | RangeItem _ x _ m _ a _ s ->
            match key with
            | X -> x
            | M -> m
            | A -> a
            | S -> s
            end
        end;

let toRange : Action -> RangeAction =
    \a ->
        match a with
        | Accept -> RangeAccept
        | Reject -> RangeReject
        | Goto x -> RangeGoto x
        end;

let matchRule : Rule -> RangeItem -> Option RangeAction =
    \r -> \i ->
        match r with
        | CheckGreater x t a ->
            if getLow i x > t then
                Some (toRange a)
            else if getHigh i x <= t then
                None
            else
                Some (RangeSwitch x (t + 1))
        | CheckLess x t a ->
            if getHigh i x < t then
                Some (toRange a)
            else if getLow i x >= t then
                None
            else
                Some (RangeSwitch x t)
        | Act a -> Some (toRange a)
        end;

let matchWorkflow : Workflow -> RangeItem -> RangeAction =
    \w -> \i ->
        match w with
        | Workflow _ rules fallback ->
            rules
            |> list.foldl None (\x -> \r ->
                match x with
                | Some _ -> x
                | None -> matchRule r i
                end)
            |> option.unwrapOr (toRange fallback)
        end;

let advanceState : RangeItem -> List Workflow -> PartState -> PartState =
    \item -> \wfs -> \state ->
        match state with
        | Accepted -> state
        | Rejected -> state
        | Error _ -> state
        | Switch _ _ -> state
        | InWorkflow wf ->
            let wf =
                wfs
                |> list.filter (\w ->
                    match w with
                    | Workflow id _ _ -> strings.equal wf id
                    end)
                |> list.head;
            match wf with
            | Some wf ->
                match matchWorkflow wf item with
                | RangeAccept -> Accepted
                | RangeReject -> Rejected
                | RangeGoto wf -> InWorkflow wf
                | RangeSwitch p x -> Switch p x
                end
            | None -> Error "item is in nonexistent workflow"
            end
        end;

let itemState : List Workflow -> RangeItem -> PartState =
    \wfs -> \item ->
        let state = InWorkflow "in";
        ints.iterate (list.length wfs) (advanceState item wfs) state;

type State = State (List RangeItem) (List RangeItem);

let stepState : List Workflow -> State -> State =
    \wfs -> \s ->
        match s with
        | State pending accepted ->
            match pending with
            | Nil -> s
            | Cons i is ->
                match itemState wfs i with
                | Accepted -> State is (Cons i accepted)
                | Rejected -> State is accepted
                | InWorkflow _ -> ?stuckInALoop
                | Error _ -> ?error
                | Switch prop x ->
                    match i with
                    | RangeItem x1 x2 m1 m2 a1 a2 s1 s2 ->
                        match prop with
                        | X ->
                            let a = RangeItem x1 (x - 1) m1 m2 a1 a2 s1 s2;
                            let b = RangeItem x x2 m1 m2 a1 a2 s1 s2;
                            State (Cons a (Cons b is)) accepted
                        | M ->
                            let a = RangeItem x1 x2 m1 (x - 1) a1 a2 s1 s2;
                            let b = RangeItem x1 x2 x m2 a1 a2 s1 s2;
                            State (Cons a (Cons b is)) accepted
                        | A ->
                            let a = RangeItem x1 x2 m1 m2 a1 (x - 1) s1 s2;
                            let b = RangeItem x1 x2 m1 m2 x a2 s1 s2;
                            State (Cons a (Cons b is)) accepted
                        | S ->
                            let a = RangeItem x1 x2 m1 m2 a1 a2 s1 (x - 1);
                            let b = RangeItem x1 x2 m1 m2 a1 a2 x s2;
                            State (Cons a (Cons b is)) accepted
                        end
                    end
                end
            end
        end;

let options : RangeItem -> int =
    \i ->
        match i with
        | RangeItem x1 x2 m1 m2 a1 a2 s1 s2 ->
            let x = x2 - x1 + 1;
            let m = m2 - m1 + 1;
            let a = a2 - a1 + 1;
            let s = s2 - s1 + 1;
            x * m * a * s
        end;

let part2 : Input -> string =
    \input ->
        match input with
        | Input wfs _ ->
            let all = RangeItem 1 4000 1 4000 1 4000 1 4000;
            let state = State (Cons all Nil) Nil;
            let accepted =
                match ints.iterate 10000 (stepState wfs) state with
                | State items accepted ->
                    if list.length items > 0 then
                        ?notEnoughIters
                    else
                        accepted
                end;
            accepted
            |> list.map options
            |> list.sum
            |> ints.toString
        end;

export let main : string -> string = utils.makeSolution parseInput part1 part2;

export let check : Result Rule string =
    parse.run
        "m>2090:A"
        (parseCmp ">" CheckGreater);
